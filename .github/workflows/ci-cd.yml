name: CI/CD Pipeline

on:
  push:
    branches:
      - 'main'
      - 'develop'
  pull_request:
    branches:
      - 'main'
      - 'develop'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# Variáveis de ambiente globais
env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  POSTGRES_USER: 'postgres'
  POSTGRES_PASSWORD: 'postgres'
  POSTGRES_DB: 'aprova_ja_ci'
  DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/aprova_ja_ci?schema=public'
  NODE_ENV: 'test'
  NEXTAUTH_URL: 'http://localhost:3000'
  NEXTAUTH_SECRET: 'test-secret-for-ci'
  # Configurações do Lighthouse CI
  LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
  # Configurações do Snyk
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN || '' }}
  # Configurações de rollback
  ROLLBACK_ENABLED: 'true'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aprova_ja_ci
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create .env.test
      run: |
        cat > .env.test << 'EOL'
        DATABASE_URL=${{ env.DATABASE_URL }}
        NEXTAUTH_URL=${{ env.NEXTAUTH_URL }}
        NEXTAUTH_SECRET=${{ env.NEXTAUTH_SECRET }}
        NODE_ENV=test
        EOL
    
    - name: Run unit tests
      run: npm test
    
    - name: Run E2E tests
      run: npm run test:e2e:ci
      env:
        CYPRESS_BASE_URL: 'http://localhost:3000'
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
    
    - name: Run Snyk test
      if: github.event_name != 'pull_request'
      uses: snyk/actions/node@master
      continue-on-error: true
      with:
        command: test
        args: --all-projects --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN || '' }}
    
    - name: Run security audit
      run: npm run security:check
      continue-on-error: true  # Permite que o pipeline continue mesmo com falhas de auditoria
      if: always()
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: |
          npm-audit-report.json
          snyk-report.json
        if-no-files-found: warn
    
  performance:
    name: Performance Tests
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli
    
    - name: Run Lighthouse CI
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      run: |
        npx @lhci/cli autorun --upload.target=temporary-public-storage \
          --collect.url="https://${{ github.event.deployment.payload.web_url || 'localhost:3000' }}" \
          --collect.settings.chromeFlags="--no-sandbox --headless" \
          --collect.settings.throttlingMethod="devtools"
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN || '' }}
    
    - name: Upload Lighthouse report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lighthouse-report
        path: |
          .lighthouseci/
          lighthouse-report.html
        if-no-files-found: warn
  
  build:
    name: Build Application
    needs: [test, performance]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          .next
          public
          package*.json
          next.config.mjs
          node_modules
          
  deploy-staging:
    name: Deploy to Staging
    needs: build
    if: |
      github.ref == 'refs/heads/develop' || 
      (github.event_name == 'workflow_dispatch' && 
       (github.event.inputs.environment == 'staging' || github.event.inputs.environment == ''))
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: .
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies (production only)
      run: npm ci --only=production
    
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Adicione aqui os comandos específicos para implantação no ambiente de staging
        # Exemplo: rsync, scp, ou comando do seu provedor de hospedagem
      env:
        DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
        
  deploy-production:
    name: Deploy to Production
    needs: [test, build, deploy-staging]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name != 'pull_request') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: .
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies (production only)
      run: npm ci --only=production
    
    - name: Deploy to Production
      id: deploy
      run: |
        echo "Running production deployment..."
        # Se o deploy falhar, o passo irá falhar e o rollback será acionado
        
        # Exemplo de comando que pode falhar:
        # if [ "$ROLLBACK_ENABLED" = "true" ]; then
        #   echo "Running deployment with rollback support..."
        #   # Seu comando de deploy aqui
        # else
        #   echo "Running deployment without rollback..."
        #   # Seu comando de deploy aqui
        # fi
        
        echo "Deployment completed successfully"
        echo "deployment_status=success" >> $GITHUB_OUTPUT
      env:
        DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}
        ROLLBACK_ENABLED: ${{ env.ROLLBACK_ENABLED }}
    
    - name: Rollback on failure
      if: steps.deploy.outcome == 'failure' && env.ROLLBACK_ENABLED == 'true'
      run: |
        echo "Deployment failed, initiating rollback..."
        # Adicione aqui os comandos para reverter para a versão anterior
        # Exemplo: reverter para o último commit estável
        echo "Rollback completed successfully"
        exit 1  # Falha o job para indicar que houve um problema
    
    - name: Notify deployment status
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_TITLE: "Deploy to Production ${{ job.status }}"
        SLACK_MESSAGE: |
          *Repositório*: ${{ github.repository }}
          *Branch*: ${{ github.ref_name }}
          *Commit*: ${{ github.sha }}
          *Status*: ${{ job.status }}
          *Rollback Ativado*: ${{ env.ROLLBACK_ENABLED }}
          
          ${{ steps.deploy.outcome == 'failure' && '❌ Falha na implantação' || '✅ Implantação bem-sucedida' }}
          
          ${{ steps.deploy.outcome == 'failure' && '⚠️ Rollback foi acionado' || '' }}
          
          *URL do Workflow*: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
        SLACK_USERNAME: GitHub Actions
        SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
