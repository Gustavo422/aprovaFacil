#!/usr/bin/env node

/**
 * üîç AN√ÅLISE FINAL CUIDADOSA - FASE 4
 * 
 * Este script remove APENAS c√≥digo realmente morto
 * Mant√©m c√≥digo que pode ser √∫til mas mal implementado
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Cores para output
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSection(title) {
  console.log('\n' + '='.repeat(60));
  log(`üîç ${title}`, 'cyan');
  console.log('='.repeat(60));
}

function removeFile(filePath) {
  try {
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
      log(`‚úÖ Removido: ${filePath}`, 'green');
      return true;
    } else {
      log(`‚ö†Ô∏è  N√£o encontrado: ${filePath}`, 'yellow');
      return false;
    }
  } catch (error) {
    log(`‚ùå Erro ao remover ${filePath}: ${error.message}`, 'red');
    return false;
  }
}

function removeDirectory(dirPath) {
  try {
    if (fs.existsSync(dirPath)) {
      fs.rmSync(dirPath, { recursive: true, force: true });
      log(`‚úÖ Removido diret√≥rio: ${dirPath}`, 'green');
      return true;
    } else {
      log(`‚ö†Ô∏è  Diret√≥rio n√£o encontrado: ${dirPath}`, 'yellow');
      return false;
    }
  } catch (error) {
    log(`‚ùå Erro ao remover diret√≥rio ${dirPath}: ${error.message}`, 'red');
    return false;
  }
}

// Estat√≠sticas
let stats = {
  filesRemoved: 0,
  directoriesRemoved: 0,
  dependenciesRemoved: 0,
  errors: 0
};

logSection('AN√ÅLISE FINAL CUIDADOSA - APENAS C√ìDIGO REALMENTE MORTO');

// FASE 1: REMOVER APENAS ARQUIVOS REALMENTE MORTOS
logSection('FASE 1: REMO√á√ÉO CUIDADOSA');

// 1.1 Arquivos de teste √≥rf√£os (que n√£o testam nada existente)
log('\nüß™ Removendo testes √≥rf√£os...', 'blue');
const orphanTests = [
  'tests/unit/frontend/utils/debugger.test.ts', // Testa arquivo que n√£o existe
  'tests/unit/frontend/utils/example.test.tsx', // Teste de exemplo
  'tests/integration/api/route.test.ts', // Testa arquivo que n√£o existe
  'tests/integration/concurso-preference.test.tsx', // Testa componentes que n√£o existem
  'tests/integration/error-display.test.tsx', // Testa componentes que n√£o existem
  'tests/integration/database/monitor.test.ts', // Testa arquivos que n√£o existem
  'tests/unit/backend/services/connectionLogService.test.ts', // Testa servi√ßos removidos
  'tests/unit/backend/services/monitoringService.test.ts', // Testa servi√ßos removidos
  'tests/unit/backend/services/sessionService.test.ts', // Testa servi√ßos removidos
  'tests/unit/frontend/components/auth-context.test.tsx', // Testa componentes que n√£o existem
  'tests/unit/frontend/components/login-form.test.tsx', // Testa componentes que n√£o existem
  'tests/unit/frontend/components/protected-route.test.tsx', // Testa componentes que n√£o existem
  'tests/unit/frontend/utils/cache-*.test.ts' // Testa cache removido
];

orphanTests.forEach(file => {
  if (removeFile(file)) {
    stats.filesRemoved++;
  } else {
    stats.errors++;
  }
});

// 1.2 Arquivos de configura√ß√£o √≥rf√£os
log('\n‚öôÔ∏è Removendo configura√ß√µes √≥rf√£s restantes...', 'blue');
const remainingConfigFiles = [
  'frontend/config/debug.ts', // Debug removido
  'frontend/middleware.ts', // Middleware √≥rf√£o
  'frontend/manual-test-concurso-preference.js', // Teste manual
  'scripts/cleanup-aggressive.cjs' // Script tempor√°rio
];

remainingConfigFiles.forEach(file => {
  if (removeFile(file)) {
    stats.filesRemoved++;
  } else {
    stats.errors++;
  }
});

// 1.3 Arquivos de exemplo √≥rf√£os
log('\nüéØ Removendo exemplos √≥rf√£os...', 'blue');
const orphanExamples = [
  'backend/src/examples/protected-routes.ts',
  'frontend/app/examples/admin-only/page.tsx',
  'frontend/app/examples/protected/page.tsx',
  'frontend/features/auth/components/examples/protected-page-example.tsx'
];

orphanExamples.forEach(file => {
  if (removeFile(file)) {
    stats.filesRemoved++;
  } else {
    stats.errors++;
  }
});

// FASE 2: REMOVER DEPEND√äNCIAS REALMENTE N√ÉO UTILIZADAS
logSection('FASE 2: DEPEND√äNCIAS REALMENTE MORTAS');

// Apenas depend√™ncias que sabemos que n√£o s√£o utilizadas
log('\nüì¶ Removendo depend√™ncias realmente mortas...', 'blue');
const reallyUnusedDependencies = [
  'es-iterator-helpers', // N√£o utilizado
  'function.prototype.name', // N√£o utilizado
  'iterator.prototype', // N√£o utilizado
  'set-function-name', // N√£o utilizado
  'mermaid', // N√£o utilizado
  'node-fetch', // Substitu√≠do por fetch nativo
  'pg', // N√£o utilizado (usando Supabase)
  'ws' // N√£o utilizado
];

// Remover em lotes pequenos
const batchSize = 5;
for (let i = 0; i < reallyUnusedDependencies.length; i += batchSize) {
  const batch = reallyUnusedDependencies.slice(i, i + batchSize);
  const command = `npm uninstall ${batch.join(' ')}`;
  
  log(`\nüì¶ Removendo lote ${Math.floor(i/batchSize) + 1}: ${batch.join(', ')}`, 'yellow');
  
  try {
    execSync(command, { stdio: 'inherit' });
    stats.dependenciesRemoved += batch.length;
  } catch (error) {
    log(`‚ùå Erro ao remover lote: ${error.message}`, 'red');
    stats.errors += batch.length;
  }
}

// FASE 3: LIMPEZA DE ARQUIVOS TEMPOR√ÅRIOS
logSection('FASE 3: ARQUIVOS TEMPOR√ÅRIOS');

log('\nüóëÔ∏è Removendo arquivos tempor√°rios...', 'blue');
const tempFiles = [
  'knip-analysis-fase4.md',
  'knip-analysis-fase4.json',
  'knip-analysis-post-cleanup.json',
  'knip-analysis-final.json'
];

tempFiles.forEach(file => {
  if (removeFile(file)) {
    stats.filesRemoved++;
  } else {
    stats.errors++;
  }
});

// RELAT√ìRIO FINAL
logSection('RELAT√ìRIO FINAL');

log(`\nüìä ESTAT√çSTICAS DA LIMPEZA FINAL:`, 'bold');
log(`‚úÖ Arquivos removidos: ${stats.filesRemoved}`, 'green');
log(`‚úÖ Diret√≥rios removidos: ${stats.directoriesRemoved}`, 'green');
log(`‚úÖ Depend√™ncias removidas: ${stats.dependenciesRemoved}`, 'green');
log(`‚ùå Erros encontrados: ${stats.errors}`, 'red');

const totalRemoved = stats.filesRemoved + stats.directoriesRemoved + stats.dependenciesRemoved;
log(`\nüéØ TOTAL DE ITENS REMOVIDOS: ${totalRemoved}`, 'bold');

log(`\nüéØ ESTRAT√âGIA APLICADA:`, 'cyan');
log(`   ‚úÖ Removido apenas c√≥digo REALMENTE morto`);
log(`   ‚úÖ Mantido c√≥digo que pode ser √∫til mas mal implementado`);
log(`   ‚úÖ Preservado estrutura que pode ser necess√°ria`);
log(`   ‚úÖ Foco em arquivos √≥rf√£os e depend√™ncias n√£o utilizadas`);

if (stats.errors > 0) {
  log(`\n‚ö†Ô∏è  ATEN√á√ÉO: ${stats.errors} erros foram encontrados durante a limpeza.`, 'yellow');
  log(`   Verifique os logs acima para mais detalhes.`, 'yellow');
}

log(`\nüöÄ LIMPEZA FINAL CONCLU√çDA!`, 'bold');
log(`   O projeto est√° limpo mantendo c√≥digo potencialmente √∫til.`, 'green');

// Executar Knip final
log(`\nüîç Executando an√°lise Knip final...`, 'blue');
try {
  execSync('npx knip --reporter json > knip-analysis-clean.json', { stdio: 'inherit' });
  log(`‚úÖ An√°lise final salva em knip-analysis-clean.json`, 'green');
} catch (error) {
  log(`‚ùå Erro na an√°lise final: ${error.message}`, 'red');
}

log(`\nüìã Pr√≥ximos passos:`, 'cyan');
log(`   1. Verificar se o projeto ainda funciona corretamente`);
log(`   2. Executar testes para garantir que nada foi quebrado`);
log(`   3. Revisar knip-analysis-clean.json para verificar resultado`);
log(`   4. Commit das mudan√ßas com mensagem descritiva`);
log(`   5. Iniciar FASE 5: Otimiza√ß√£o e Monitoramento`); 