#!/usr/bin/env node

/**
 * Script de teste para validar a configura√ß√£o unificada do Supabase
 * FASE 3: CONFIGURA√á√ÉO UNIFICADA - TESTES
 */

const fs = require('fs');
const path = require('path');

// Fun√ß√£o para verificar se um arquivo usa a configura√ß√£o unificada
function checkUnifiedConfig(filePath) {
  try {
    if (!fs.existsSync(filePath)) {
      return { status: 'not_found', message: 'Arquivo n√£o encontrado' };
    }

    const content = fs.readFileSync(filePath, 'utf8');
    
    // Verificar se usa configura√ß√£o unificada
    if (content.includes("import { supabase } from '@/config/supabase-unified'")) {
      return { status: 'unified', message: '‚úÖ Usa configura√ß√£o unificada' };
    }
    
    // Verificar se ainda usa createClient diretamente
    if (content.includes("import { createClient } from '@supabase/supabase-js'")) {
      return { status: 'direct', message: '‚ùå Ainda usa createClient diretamente' };
    }
    
    // Verificar se n√£o usa Supabase
    if (!content.includes('supabase') && !content.includes('createClient')) {
      return { status: 'none', message: '‚ÑπÔ∏è N√£o usa Supabase' };
    }
    
    return { status: 'unknown', message: '‚ùì Configura√ß√£o desconhecida' };
  } catch (error) {
    return { status: 'error', message: `‚ùå Erro: ${error.message}` };
  }
}

// Arquivos para testar
const TEST_FILES = [
  // Backend - arquivos principais
  'backend/src/config/supabase-unified.ts',
  'backend/src/app.ts',
  'backend/src/auth/enhanced-auth.service.ts',
  'backend/src/repositories/UserRepository.ts',
  'backend/src/api/auth/login/route.ts',
  'backend/src/api/auth/me/route.ts',
  'backend/src/api/admin/security/route.ts',
  
  // Frontend - arquivos principais
  'frontend/lib/supabase.tsx',
  'frontend/src/lib/supabase/enhanced-client.ts',
  'frontend/src/lib/repositories/base.ts'
];

// Verificar se arquivos redundantes foram removidos
const REMOVED_FILES = [
  'backend/src/api/concursos/config/supabase.ts',
  'frontend/src/lib/supabase/client.tsx'
];

function main() {
  console.log('üß™ FASE 3: CONFIGURA√á√ÉO UNIFICADA - TESTES DE VALIDA√á√ÉO');
  console.log('=' .repeat(70));
  
  let unifiedCount = 0;
  let directCount = 0;
  let otherCount = 0;
  
  // Testar arquivos principais
  console.log('\nüìÅ Testando arquivos principais...');
  for (const filePath of TEST_FILES) {
    const result = checkUnifiedConfig(filePath);
    console.log(`  ${result.message} - ${filePath}`);
    
    if (result.status === 'unified') unifiedCount++;
    else if (result.status === 'direct') directCount++;
    else otherCount++;
  }
  
  // Verificar arquivos removidos
  console.log('\nüóëÔ∏è  Verificando arquivos removidos...');
  for (const filePath of REMOVED_FILES) {
    if (!fs.existsSync(filePath)) {
      console.log(`  ‚úÖ Removido: ${filePath}`);
    } else {
      console.log(`  ‚ùå Ainda existe: ${filePath}`);
    }
  }
  
  // Verificar configura√ß√£o unificada
  console.log('\nüîß Verificando configura√ß√£o unificada...');
  const unifiedConfig = checkUnifiedConfig('backend/src/config/supabase-unified.ts');
  if (unifiedConfig.status === 'unified') {
    console.log('  ‚úÖ Configura√ß√£o unificada existe e est√° correta');
  } else {
    console.log(`  ‚ùå Problema na configura√ß√£o unificada: ${unifiedConfig.message}`);
  }
  
  // Resumo
  console.log('\n' + '=' .repeat(70));
  console.log('üìä RESUMO DOS TESTES:');
  console.log(`  ‚úÖ Arquivos com configura√ß√£o unificada: ${unifiedCount}`);
  console.log(`  ‚ùå Arquivos ainda usando createClient: ${directCount}`);
  console.log(`  ‚ÑπÔ∏è  Outros arquivos: ${otherCount}`);
  console.log(`  üóëÔ∏è  Arquivos redundantes removidos: ${REMOVED_FILES.length}`);
  
  if (directCount === 0 && unifiedCount > 0) {
    console.log('\nüéâ FASE 3 CONCLU√çDA COM SUCESSO!');
    console.log('‚úÖ Todas as importa√ß√µes est√£o usando a configura√ß√£o unificada');
    console.log('üöÄ Pr√≥ximo passo: FASE 4 - Limpeza de c√≥digo');
  } else if (directCount > 0) {
    console.log('\n‚ö†Ô∏è  AINDA H√Å ARQUIVOS PARA ATUALIZAR');
    console.log(`‚ùå ${directCount} arquivos ainda usam createClient diretamente`);
    console.log('üîÑ Execute novamente o script de atualiza√ß√£o');
  } else {
    console.log('\n‚ùå NENHUM ARQUIVO USA CONFIGURA√á√ÉO UNIFICADA');
    console.log('üîç Verifique se a configura√ß√£o unificada foi criada corretamente');
  }
}

if (require.main === module) {
  main();
}

module.exports = { main, checkUnifiedConfig }; 