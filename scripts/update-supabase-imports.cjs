#!/usr/bin/env node

/**
 * Script para atualizar todas as importa√ß√µes do Supabase para usar a configura√ß√£o unificada
 * FASE 3: CONFIGURA√á√ÉO UNIFICADA
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Configura√ß√µes
const BACKEND_DIR = path.join(__dirname, '../backend');
const FRONTEND_DIR = path.join(__dirname, '../frontend');

// Padr√µes de importa√ß√£o para substituir
const IMPORT_PATTERNS = [
  // Backend - substituir importa√ß√µes diretas por configura√ß√£o unificada
  {
    pattern: /import\s+\{\s*createClient\s*\}\s+from\s+['"]@supabase\/supabase-js['"];?\s*\nconst\s+supabase\s*=\s*createClient\([^)]+\);/g,
    replacement: `import { supabase } from '@/config/supabase-unified';`,
    description: 'Substituir createClient direto por configura√ß√£o unificada (backend)'
  },
  {
    pattern: /import\s+\{\s*createClient,\s*SupabaseClient\s*\}\s+from\s+['"]@supabase\/supabase-js['"];?\s*\nconst\s+supabase\s*=\s*createClient\([^)]+\);/g,
    replacement: `import { supabase } from '@/config/supabase-unified';`,
    description: 'Substituir createClient com SupabaseClient por configura√ß√£o unificada (backend)'
  },
  {
    pattern: /import\s+\{\s*supabase\s*\}\s+from\s+['"]\.\.\/config\/supabase['"];?/g,
    replacement: `import { supabase } from '@/config/supabase-unified';`,
    description: 'Substituir importa√ß√£o de config/supabase por configura√ß√£o unificada'
  },
  {
    pattern: /import\s+\{\s*supabase\s*\}\s+from\s+['"]\.\.\/\.\.\/config\/supabase['"];?/g,
    replacement: `import { supabase } from '@/config/supabase-unified';`,
    description: 'Substituir importa√ß√£o relativa de config/supabase por configura√ß√£o unificada'
  },
  {
    pattern: /import\s+\{\s*supabase\s*\}\s+from\s+['"]\.\.\/\.\.\/\.\.\/config\/supabase['"];?/g,
    replacement: `import { supabase } from '@/config/supabase-unified';`,
    description: 'Substituir importa√ß√£o relativa profunda de config/supabase por configura√ß√£o unificada'
  },
  {
    pattern: /import\s+\{\s*supabase\s*\}\s+from\s+['"]\.\.\/\.\.\/\.\.\/\.\.\/config\/supabase['"];?/g,
    replacement: `import { supabase } from '@/config/supabase-unified';`,
    description: 'Substituir importa√ß√£o relativa muito profunda de config/supabase por configura√ß√£o unificada'
  },
  {
    pattern: /import\s+\{\s*supabase\s*\}\s+from\s+['"]\.\.\/\.\.\/\.\.\/\.\.\/\.\.\/config\/supabase['"];?/g,
    replacement: `import { supabase } from '@/config/supabase-unified';`,
    description: 'Substituir importa√ß√£o relativa extremamente profunda de config/supabase por configura√ß√£o unificada'
  },
  {
    pattern: /import\s+\{\s*supabase\s*\}\s+from\s+['"]\.\.\/\.\.\/\.\.\/\.\.\/\.\.\/\.\.\/config\/supabase['"];?/g,
    replacement: `import { supabase } from '@/config/supabase-unified';`,
    description: 'Substituir importa√ß√£o relativa m√°xima de config/supabase por configura√ß√£o unificada'
  }
];

// Arquivos que devem ser removidos (configura√ß√µes redundantes)
const FILES_TO_REMOVE = [
  'backend/src/api/concursos/config/supabase.ts',
  'frontend/src/lib/supabase/client.tsx'
];

// Arquivos que devem ser ignorados (manter configura√ß√£o espec√≠fica)
const FILES_TO_IGNORE = [
  'backend/src/config/supabase-unified.ts', // Configura√ß√£o unificada (manter)
  'frontend/lib/supabase.tsx', // Configura√ß√£o frontend espec√≠fica (manter)
  'frontend/src/lib/supabase/enhanced-client.ts', // Cliente avan√ßado (manter)
  'frontend/src/lib/supabase/connection-pool.ts', // Pool de conex√µes (manter)
  'frontend/src/lib/supabase/pooled-client.ts', // Cliente com pool (manter)
  'frontend/src/lib/supabase/supabase-provider.tsx', // Provider React (manter)
  'frontend/src/lib/repositories/base.ts', // Repository base (manter)
  'frontend/lib/cache-database-service.ts', // Servi√ßo de cache (manter)
  'backend/src/lib/logging/supabase-transport.ts', // Transport de logging (manter)
  'backend/src/repositories/UserRepository.ts', // Repository espec√≠fico (manter)
  'backend/src/core/monitoring/database-status.ts', // Monitoramento (manter)
  'backend/src/auth/enhanced-auth.service.ts', // Servi√ßo de auth (manter)
  'backend/src/app.ts', // App principal (manter)
  'backend/src/security/login-security.service.ts', // Seguran√ßa (manter)
  'backend/src/utils/test-history.ts', // Utilit√°rio espec√≠fico (manter)
  'backend/src/utils/run-users-migration.ts', // Migra√ß√£o (manter)
  'backend/src/utils/metrics-history.ts', // M√©tricas (manter)
  'backend/src/utils/log-history.ts', // Logs (manter)
  'backend/src/api/monitor/tests/run/route.ts', // Rota de monitoramento (manter)
  'backend/src/api/monitor/tests/history/route.ts', // Rota de hist√≥rico (manter)
  'backend/src/api/monitor/metrics/history/route.ts', // Rota de m√©tricas (manter)
  'backend/src/api/monitor/metrics/custom/route.ts', // Rota customizada (manter)
  'backend/src/api/auth/refresh/route.ts', // Rota de auth (manter)
  'backend/src/api/auth/login/route.ts', // Rota de login (manter)
  'backend/src/api/auth/me/route.ts', // Rota de perfil (manter)
  'backend/src/api/auth/logout/route.ts', // Rota de logout (manter)
  'backend/src/api/admin/security/route.ts' // Rota de admin (manter)
];

function shouldIgnoreFile(filePath) {
  return FILES_TO_IGNORE.some(ignorePath => 
    filePath.includes(ignorePath.replace(/^backend\//, '').replace(/^frontend\//, ''))
  );
}

function findTypeScriptFiles(dir) {
  const files = [];
  
  function traverse(currentDir) {
    const items = fs.readdirSync(currentDir);
    
    for (const item of items) {
      const fullPath = path.join(currentDir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        // Ignorar node_modules e pastas de backup
        if (!item.includes('node_modules') && !item.includes('backup') && !item.includes('.git')) {
          traverse(fullPath);
        }
      } else if (item.endsWith('.ts') || item.endsWith('.tsx')) {
        const relativePath = path.relative(process.cwd(), fullPath);
        if (!shouldIgnoreFile(relativePath)) {
          files.push(fullPath);
        }
      }
    }
  }
  
  traverse(dir);
  return files;
}

function updateFile(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let originalContent = content;
    let changes = 0;
    
    // Aplicar cada padr√£o de substitui√ß√£o
    for (const pattern of IMPORT_PATTERNS) {
      const matches = content.match(pattern.pattern);
      if (matches) {
        content = content.replace(pattern.pattern, pattern.replacement);
        changes += matches.length;
        console.log(`  ‚úÖ ${pattern.description}: ${matches.length} substitui√ß√µes`);
      }
    }
    
    // Se houve mudan√ßas, salvar o arquivo
    if (content !== originalContent) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`  üíæ Arquivo atualizado: ${path.relative(process.cwd(), filePath)}`);
      return changes;
    }
    
    return 0;
  } catch (error) {
    console.error(`  ‚ùå Erro ao processar ${filePath}:`, error.message);
    return 0;
  }
}

function removeRedundantFiles() {
  console.log('\nüóëÔ∏è  Removendo arquivos de configura√ß√£o redundantes...');
  
  for (const filePath of FILES_TO_REMOVE) {
    const fullPath = path.join(process.cwd(), filePath);
    
    if (fs.existsSync(fullPath)) {
      try {
        fs.unlinkSync(fullPath);
        console.log(`  ‚úÖ Removido: ${filePath}`);
      } catch (error) {
        console.error(`  ‚ùå Erro ao remover ${filePath}:`, error.message);
      }
    } else {
      console.log(`  ‚ö†Ô∏è  Arquivo n√£o encontrado: ${filePath}`);
    }
  }
}

function main() {
  console.log('üöÄ FASE 3: CONFIGURA√á√ÉO UNIFICADA - ATUALIZANDO IMPORTA√á√ïES');
  console.log('=' .repeat(70));
  
  let totalChanges = 0;
  let totalFiles = 0;
  
  // Processar arquivos do backend
  console.log('\nüìÅ Processando arquivos do backend...');
  const backendFiles = findTypeScriptFiles(BACKEND_DIR);
  
  for (const file of backendFiles) {
    const changes = updateFile(file);
    if (changes > 0) {
      totalChanges += changes;
      totalFiles++;
    }
  }
  
  // Processar arquivos do frontend (apenas os que n√£o s√£o ignorados)
  console.log('\nüìÅ Processando arquivos do frontend...');
  const frontendFiles = findTypeScriptFiles(FRONTEND_DIR);
  
  for (const file of frontendFiles) {
    const changes = updateFile(file);
    if (changes > 0) {
      totalChanges += changes;
      totalFiles++;
    }
  }
  
  // Remover arquivos redundantes
  removeRedundantFiles();
  
  // Resumo
  console.log('\n' + '=' .repeat(70));
  console.log('üìä RESUMO DA ATUALIZA√á√ÉO:');
  console.log(`  üìÅ Arquivos processados: ${backendFiles.length + frontendFiles.length}`);
  console.log(`  ‚úèÔ∏è  Arquivos modificados: ${totalFiles}`);
  console.log(`  üîÑ Total de substitui√ß√µes: ${totalChanges}`);
  console.log(`  üóëÔ∏è  Arquivos removidos: ${FILES_TO_REMOVE.length}`);
  
  if (totalChanges > 0) {
    console.log('\n‚úÖ FASE 3 CONCLU√çDA COM SUCESSO!');
    console.log('üéØ Pr√≥ximo passo: Executar testes para validar as mudan√ßas');
  } else {
    console.log('\n‚ö†Ô∏è  Nenhuma mudan√ßa foi necess√°ria');
    console.log('‚ÑπÔ∏è  As importa√ß√µes j√° est√£o usando a configura√ß√£o unificada');
  }
}

if (require.main === module) {
  main();
}

module.exports = { main, updateFile, removeRedundantFiles }; 